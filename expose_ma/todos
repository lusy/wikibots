# TODOs

* Read Code and other Laws of Cyberspace // code would indeed be law if bots implement something else than anyone wanted which turns to be the status quo
* Read through Marcela's literature
* Begriffe operationalisieren:
  * conflict?
  * bot
  * algorithm
  * algorithmic governance

* Bot policies in verschiedenen Sprachen angucken
* Über Methoden und Epistemologie nachdenken
  * what is the question
  * what are adequate methods to answer it?
  * GeiHal2017 haben einen "Epistemology Overview" chapter!

* Bot resources angucken:
  * Mediation committee
  * Bot Approval Group
  * Bot policies (siehe oben)
  * bot users and former bot users
  * Bot approval proposals
  https://en.wikipedia.org/wiki/Wikipedia:Bots/Requests_for_approval
  https://bg.wikipedia.org/wiki/%D0%A3%D0%B8%D0%BA%D0%B8%D0%BF%D0%B5%D0%B4%D0%B8%D1%8F:%D0%91%D0%BE%D1%82/%D0%97%D0%B0%D1%8F%D0%B2%D0%BA%D0%B8
  https://en.wikipedia.org/wiki/Wikipedia:Bots/Requests_for_approval/Addbot_32
  * Arbitration Committee ("adjudicating complex and high-level disputes, including several cases around bots")

* Identifying bots: (siehe auch https://github.com/halfak/are-the-bots-really-fighting)
  * bot user group
  * user_former_groups : former bots
  * "Bot user" cross-wiki category
  https://de.wikipedia.org/wiki/Wikipedia:Bots
  Wikidata Item “Q3681760”
  --> identify all bots with available source code
  --> which of them are active in the community area?
  --> look at process of approval (request for the bot, discussion, etc.)

* Interesting/tricky bots angucken (bes. im Community-Bereich aktiv):
  * ClueBot NG + HBC AIV Helperbots(fighting vandalism)
  * Mr.Z-bot: notifies users directly for users that are most likely spammers
  * HagermanBot: signs unsigned discussion entries
  * AvicBot: moves pages from category A to category B, if merge request exist on Categories for Discussion, or removes a category entirely if the request is to empty the category
  * CSDWarnBot: warns users when pages they've created are nominated for speedy deletion

* pywikibot, other bot development frameworks
  https://www.mediawiki.org/wiki/Manual:Pywikibot/redirect.py

* Propose own bot and go through the whole process

* methods:
  * begin with some data dumps, but ask additional questions and supplement with different data and methods
  * cooking data with care: take note of data science pipeline: explore the data, compile it carefully, ask critical questions
  * interviews with bot developers: understanding their considerations when developing the bot code.

* chapters/structure --> sich an GeiHal2017 orientieren

* What about the bots that tweet about anonyme edits from inside the Parliament/Congress/Bundestag?

* Define Research question!
  * "What kinds of work are these bots were doing?
  * What were the bot’s developers intending the bots to do?" vgl GeiHal2017

# Notes on tools/stuff that may be useful

* for running SQL querries against Wikipedias DB: https://quarry.wmflabs.org/query/20703
* https://dumps.wikimedia.org


# Für die Arbeit

* Autor*inpositionierung, kein "view from nowhere"
* Begin with a story (or several) in the similar fashion as Geiger's introductory vignettes
* ANT mappings? Latour und Venturini
* possible way of citing central works: einzelne quotes (siehe GeiHal2017)

* Recommendation for ethical code guidelines for algorithmic systems
